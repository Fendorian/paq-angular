{"version":3,"sources":["./src/app/components/pages/home/home-routing.module.ts","./node_modules/ng-circle-progress/fesm2015/ng-circle-progress.js","./src/app/components/pages/home/about/about.component.ts","./src/app/components/pages/home/about/about.component.html","./src/app/components/pages/home/service/service.component.html","./src/app/components/pages/home/home.module.ts","./src/app/components/pages/home/facts/facts.component.ts","./src/app/components/pages/home/banner/banner.component.html","./src/app/components/pages/home/home.component.html","./src/app/components/pages/home/whyus/whyus.component.html","./src/app/components/pages/home/service/service.component.ts","./src/app/components/pages/home/banner/banner.component.ts","./src/app/components/pages/home/facts/facts.component.html","./src/app/components/pages/home/home.component.ts","./src/app/components/pages/home/whyus/whyus.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAiD;AAEjD,MAAM,MAAM,GAAW,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,6DAAa,EAAE,CAAC,CAAC;AAMzD,MAAM,iBAAiB;CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqG;AAC5C;AAC5B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAsD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sDAAsD;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,sDAAsD;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ,GAAG,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,4BAA4B,aAAa,GAAG;AAC5C,YAAY,oBAAoB,GAAG,oBAAoB,KAAK,aAAa,GAAG,UAAU,GAAG,WAAW,GAAG,WAAW;AAClH;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iCAAiC;AAClD;AACA;AACA,0CAA0C,kDAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,0CAA0C,kDAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uDAAuD;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,qBAAqB;AAC9G;AACA,qBAAqB;AACrB;AACA;AACA;AACA,6BAA6B,kDAAK;AAClC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uBAAuB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4BAA4B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,YAAY;AACvE;AACA;AACA;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,YAAY;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK,8BAA8B;AACnC,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AACvE;AACA;AACA,eAAe,OAAO,oDAAM,EAAE;AAC9B,YAAY,OAAO,mDAAK,EAAE;AAC1B,aAAa,OAAO,mDAAK,EAAE;AAC3B,0BAA0B,OAAO,mDAAK,EAAE;AACxC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,mCAAmC,OAAO,mDAAK,EAAE;AACjD,yBAAyB,OAAO,mDAAK,EAAE;AACvC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,yBAAyB,OAAO,mDAAK,EAAE;AACvC,cAAc,OAAO,mDAAK,EAAE;AAC5B,aAAa,OAAO,mDAAK,EAAE;AAC3B,eAAe,OAAO,mDAAK,EAAE;AAC7B,eAAe,OAAO,mDAAK,EAAE;AAC7B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,aAAa,OAAO,mDAAK,EAAE;AAC3B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,oCAAoC,OAAO,mDAAK,EAAE;AAClD,0BAA0B,OAAO,mDAAK,EAAE;AACxC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,aAAa,OAAO,mDAAK,EAAE;AAC3B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,sBAAsB,OAAO,mDAAK,EAAE;AACpC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,YAAY,OAAO,mDAAK,EAAE;AAC1B,uBAAuB,OAAO,mDAAK,sBAAsB;AACzD;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEkF;AAClF;;;;;;;;;;;;;AC7rBA;AAAA;AAAO,MAAM,cAAc;IAEzB,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;CAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGCdD,yLA4BU,KA3BN,8IA0BM,KAzBF,oJAEM,KADF,gLAAoD,KAExD,iMAqBM,KApBF,uJAmBM,KAlBF,+IAiBM,KAhBF,mKAGM,KAFF,8IAAuC,KAAf,gFAAQ,MAChC,yIAAkE,KAAhD,8FAAsB,6HAAI,8FAAiB,MAEjE,wIAGI,KAHa,2OAGjB,MACA,sHAEI,KAFD,kKAEH,MACA,8IAGK,KAFD,uHAAmE,KAA9D,+IAA4B,0GAA6B,MAC9D,uHAAsE,KAAjE,+IAA4B,6GAAgC,MAErE;;;iZAAsD,IAAd,kFAAU,2BAA/C,wBAAmB,EAAtB,aAAsD,EAAnD,SAAmB,2BAAtB,uMAAsD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGCd9D,kLAWM,KAVF,4JASM,KARF,wIAEM,KADF,iJAAgD,KAEpD,sHAAwE,KAApE;;;gZAA+D,IAAlB,2EAAc,MAC/D,qHAAyB,KAAtB,2EAAkB,MACrB;;;iZAEI,IADA,0JAAuC,0BAHpC,oIAAyC,GAA5C,YAA+D,EAA5D,SAAyC,GAE7C,oIAAyC,GAA5C,aAEI,EAFD,SAAyC,2BAJnC,kBAAuB,+BAAC,kBAAkB,0BAA/C,YAAgD,EAA3C,SAAuB,EAAC,SAAkB,GAE/C,oMAA+D,GAAlB,mEAAc,GAC5D,uEAAkB,GACrB,uMAEI;sGAlBxB,4LAuBU,KAtBN,8IAqBM,KAnBF,+KAGM,KAFF,8IAA8C,KAAtB,uFAAe,MACvC,wIAA0E,KAAxD,kGAA0B,4HAAI,kGAAqB,MAGzE,4KAaM,KAZF,mdAWM,GAXqD,wUAAwC,IAAnG,aAWM,EAXqD,SAAwC;;;;;;;;;;;;;;;;ACwB/G;AAAA;AAAO,MAAM,UAAU;CAAI;;;;;;;;;;;;;AChC3B;AAAA;AAAA;AAAA;AAAoD;AAO7C,MAAM,cAAc;IAEzB;QACO,YAAO,GAAG,+CAAO,CAAC;IADT,CAAC;IAGjB,QAAQ;IACR,CAAC;CAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qGCdO,iiBAyBM,IAvBF,8IAgBM,KAfF,wIAcM,KAbF,6IAYM,KAXF,kJAUM,KATF,yMAEO,KAFgE,6EAEvE,MACA,2LAA4E,KAC5E,2IAIK,KAHD,+KAEK,KADD;;;iZAAwE,IAAnB,uFAAe,MAO5F,kJAKM,KAJF,wIAAuB,KACvB,wIAAuB,KACvB,0IAAyB,KACzB,yIAAwB,0BAvBhC,YAyBM,GAbyB,0BAAqB,EAAxB,aAAwE,EAArE,SAAqB,2BAZZ,0DAA8C,GAAtF,YAyBM,EAzBkC,SAA8C,GAMK,sEAEvE,GAC8C,kBAAwB,0BAAtE,YAA4E,EAA9B,SAAwB,GAG9D,uMAAwE;qGAd5G,sJAgCU,KA/BN,ghCA2BqB,IA1BjB,8cAyBM,iDA1BuC,mBAAmB,WAApE,YA2BqB,EA3B4B,SAAmB,GAE5D,mBAA2B,SAD/B,YAyBM,EAxBF,SAA2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mGCHvC;;;imBAAiC,IACjC,+cAAyB,IACzB,qcAAuB,IACvB,4dAA2B,IAG3B,wcAAuB,IACvB,0cAAuB,IAIvB,uJAMU,KALN,8IAIM,KAHF,0KAEM,KADF,yeAAyB,IAKrC,0tBAC+C,iDApB/C,YAAiC,GACjC,YAAyB,GACzB,YAAuB,GACvB,YAA2B,GAG3B,YAAuB,GACvB,aAAuB,GAOX,aAAyB,GAKR,mBAAoB,YAAC,mBAAe,SAAC,mBAAiB,UAAC,mBAAmB,WAAC,mBAA2B,eAC/H,mBAA6B,gBADjC,aAC+C,EADlB,SAAoB,EAAC,SAAe,EAAC,SAAiB,EAAC,SAAmB,EAAC,SAA2B,EAC/H,SAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGCDL,sHAEK,KADD,qJAAmC,sLACvC;oGArB5B,8JAgCU,KA/BN,8IA8BM,KA7BF,8IA4BM,KA3BF,kLAwBM,KAvBF,4IAIM,KAHF,sKAEM,KADF,gLAAoD,KAG5D,uJAiBM,KAhBF,6IAeM,KAdF,mKAGM,KAFF,+IAAyC,KAAjB,kFAAU,MAClC,yIAA4D,KAA1C,yFAAiB,6HAAI,6FAAgB,MAE3D,sHAEI,KAFD,iKAEH,MACA,4IAIK,KAHD,idAEK,IAGT;;;iZAAqE,IAAhB,oFAAY,mDALzD,mBAAyB,OAA7B,aAEK,EAFD,SAAyB,GAK9B,0BAAqB,EAAxB,aAAqE,EAAlE,SAAqB,2BAAxB,uMAAqE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvB7F;AAAA;AAAA;AAAA;AAAoD;AAO7C,MAAM,gBAAgB;IAE3B;QACO,YAAO,GAAG,+CAAO,CAAC;IADT,CAAC;IAGjB,QAAQ;IACR,CAAC;CAEF;;;;;;;;;;;;;ACTD;AAAA;AAAO,MAAM,eAAe;IAE1B;QACA,WAAM,GAAG;YACP;gBACE,GAAG,EAAE,0BAA0B;gBAC/B,QAAQ,EAAE,uBAAuB;gBACjC,KAAK,EAAE,oEAAoE;aAC5E;YACD;gBACE,GAAG,EAAE,0BAA0B;gBAC/B,QAAQ,EAAE,uBAAuB;gBACjC,KAAK,EAAE,oEAAoE;aAC5E;YACD;gBACE,GAAG,EAAE,0BAA0B;gBAC/B,QAAQ,EAAE,uBAAuB;gBACjC,KAAK,EAAE,oEAAoE;aAC5E;SACF,CAAC;QACF,aAAQ,GAAG;YACT,QAAQ,EAAE,IAAI;YACd,YAAY,EAAE,CAAC;YACf,cAAc,EAAE,CAAC;YACjB,QAAQ,EAAE,IAAI;YACd,aAAa,EAAE,IAAI;YACnB,KAAK,EAAE,GAAG;YACV,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,KAAK;YACX,IAAI,EAAE,KAAK;YACX,KAAK,EAAE,IAAI;YACX,cAAc,EAAE,IAAI;YACpB,SAAS,EAAE,yFAAyF;YACpG,SAAS,EAAE,wFAAwF;YACnG,UAAU,EAAE,CAAC;oBACX,UAAU,EAAE,GAAG;oBACf,QAAQ,EAAE;wBACR,MAAM,EAAE,KAAK;qBACd;iBACF,CAAC;SACH,CAAC;IAtCc,CAAC;IAwCjB,QAAQ;IACR,CAAC;CAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGCjDW,kJAQM,KAPF,8JAMM,KALF,wIAEM,KADF,sIAA2B,KAE/B,0IAAwD,KAApC,uIAA+B,IACnD,uIAAmC,KAAlB,2EAAc,iCAHxB,kBAAmB,yBAAtB,YAA2B,EAAxB,SAAmB,GAEN,2NAA+B,GAClC,mEAAc;mRATnD,4JAcU,KAbN,6IAYM,KAXF,6LAUM,KATF,gdAQM,iDARsB,mBAA4B,UAAxD,YAQM,EARsB,SAA4B;;;;;;;;;;;;;;;;ACIpE;AAAA;AAAO,MAAM,aAAa;IAExB;QACA,eAAe;QACf,cAAS,GAAG,EAAE,CAAC;QACf,WAAM,GAAG,uBAAuB,CAAC;QACjC,YAAO,GAAG,yBAAyB,CAAC;QACpC,aAAQ,GAAG,yBAAyB,CAAC;QACrC,iBAAY,GAAG,UAAU,CAAC;QAC1B,kBAAa,GAAG,UAAU,CAAC;IAPX,CAAC;IASjB,QAAQ;IACR,CAAC;CAEF;;;;;;;;;;;;;ACdD;AAAA;AAAO,MAAM,cAAc;IAEzB;QACA,SAAI,GAAG;YACL,EAAC,KAAK,EAAC,iCAAiC,EAAC;YACzC,EAAC,KAAK,EAAC,sCAAsC,EAAC;YAC9C,EAAC,KAAK,EAAC,uCAAuC,EAAC;SAChD,CAAC;IALc,CAAC;IAOjB,QAAQ;IACR,CAAC;CAEF","file":"components-pages-home-home-module-ngfactory.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home.component';\n\nconst routes: Routes = [{ path: '', component: HomeComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomeRoutingModule { }\n","import { EventEmitter, Component, ElementRef, Inject, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { timer } from 'rxjs';\n\nclass CircleProgressOptions {\r\n    constructor() {\r\n        this.class = '';\r\n        this.backgroundGradient = false;\r\n        this.backgroundColor = 'transparent';\r\n        this.backgroundGradientStopColor = 'transparent';\r\n        this.backgroundOpacity = 1;\r\n        this.backgroundStroke = 'transparent';\r\n        this.backgroundStrokeWidth = 0;\r\n        this.backgroundPadding = 5;\r\n        this.percent = 0;\r\n        this.radius = 90;\r\n        this.space = 4;\r\n        this.toFixed = 0;\r\n        this.maxPercent = 1000;\r\n        this.renderOnClick = true;\r\n        this.units = '%';\r\n        this.unitsFontSize = '10';\r\n        this.unitsFontWeight = 'normal';\r\n        this.unitsColor = '#444444';\r\n        this.outerStrokeGradient = false;\r\n        this.outerStrokeWidth = 8;\r\n        this.outerStrokeColor = '#78C000';\r\n        this.outerStrokeGradientStopColor = 'transparent';\r\n        this.outerStrokeLinecap = 'round';\r\n        this.innerStrokeColor = '#C7E596';\r\n        this.innerStrokeWidth = 4;\r\n        this.titleFormat = undefined;\r\n        this.title = 'auto';\r\n        this.titleColor = '#444444';\r\n        this.titleFontSize = '20';\r\n        this.titleFontWeight = 'normal';\r\n        this.subtitleFormat = undefined;\r\n        this.subtitle = 'progress';\r\n        this.subtitleColor = '#A9A9A9';\r\n        this.subtitleFontSize = '10';\r\n        this.subtitleFontWeight = 'normal';\r\n        this.imageSrc = undefined;\r\n        this.imageHeight = undefined;\r\n        this.imageWidth = undefined;\r\n        this.animation = true;\r\n        this.animateTitle = true;\r\n        this.animateSubtitle = false;\r\n        this.animationDuration = 500;\r\n        this.showTitle = true;\r\n        this.showSubtitle = true;\r\n        this.showUnits = true;\r\n        this.showImage = false;\r\n        this.showBackground = true;\r\n        this.showInnerStroke = true;\r\n        this.clockwise = true;\r\n        this.responsive = false;\r\n        this.startFromZero = true;\r\n        this.showZeroOuterStroke = true;\r\n        this.lazy = false;\r\n    }\r\n}\r\n/** @dynamic Prevent compiling error when using type `Document` https://github.com/angular/angular/issues/20351 */\r\nclass CircleProgressComponent {\r\n    constructor(defaultOptions, elRef, document) {\r\n        this.elRef = elRef;\r\n        this.document = document;\r\n        this.onClick = new EventEmitter();\r\n        // <svg> of component\r\n        this.svgElement = null;\r\n        // whether <svg> is in viewport\r\n        this.isInViewport = false;\r\n        // event for notifying viewport change caused by scrolling or resizing\r\n        this.onViewportChanged = new EventEmitter;\r\n        this._viewportChangedSubscriber = null;\r\n        this.options = new CircleProgressOptions();\r\n        this.defaultOptions = new CircleProgressOptions();\r\n        this._lastPercent = 0;\r\n        this._gradientUUID = null;\r\n        this.render = () => {\r\n            this.applyOptions();\r\n            if (this.options.lazy) {\r\n                // Draw svg if it doesn't exist\r\n                this.svgElement === null && this.draw(this._lastPercent);\r\n                // Draw it only when it's in the viewport\r\n                if (this.isInViewport) {\r\n                    // Draw it at the latest position when I am in.\r\n                    if (this.options.animation && this.options.animationDuration > 0) {\r\n                        this.animate(this._lastPercent, this.options.percent);\r\n                    }\r\n                    else {\r\n                        this.draw(this.options.percent);\r\n                    }\r\n                    this._lastPercent = this.options.percent;\r\n                }\r\n            }\r\n            else {\r\n                if (this.options.animation && this.options.animationDuration > 0) {\r\n                    this.animate(this._lastPercent, this.options.percent);\r\n                }\r\n                else {\r\n                    this.draw(this.options.percent);\r\n                }\r\n                this._lastPercent = this.options.percent;\r\n            }\r\n        };\r\n        this.polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {\r\n            let angleInRadius = angleInDegrees * Math.PI / 180;\r\n            let x = centerX + Math.sin(angleInRadius) * radius;\r\n            let y = centerY - Math.cos(angleInRadius) * radius;\r\n            return { x: x, y: y };\r\n        };\r\n        this.draw = (percent) => {\r\n            // make percent reasonable\r\n            percent = (percent === undefined) ? this.options.percent : Math.abs(percent);\r\n            // circle percent shouldn't be greater than 100%.\r\n            let circlePercent = (percent > 100) ? 100 : percent;\r\n            // determine box size\r\n            let boxSize = this.options.radius * 2 + this.options.outerStrokeWidth * 2;\r\n            if (this.options.showBackground) {\r\n                boxSize += (this.options.backgroundStrokeWidth * 2 + this.max(0, this.options.backgroundPadding * 2));\r\n            }\r\n            // the centre of the circle\r\n            let centre = { x: boxSize / 2, y: boxSize / 2 };\r\n            // the start point of the arc\r\n            let startPoint = { x: centre.x, y: centre.y - this.options.radius };\r\n            // get the end point of the arc\r\n            let endPoint = this.polarToCartesian(centre.x, centre.y, this.options.radius, 360 * (this.options.clockwise ?\r\n                circlePercent :\r\n                (100 - circlePercent)) / 100); // ####################\r\n            // We'll get an end point with the same [x, y] as the start point when percent is 100%, so move x a little bit.\r\n            if (circlePercent === 100) {\r\n                endPoint.x = endPoint.x + (this.options.clockwise ? -0.01 : +0.01);\r\n            }\r\n            // largeArcFlag and sweepFlag\r\n            let largeArcFlag, sweepFlag;\r\n            if (circlePercent > 50) {\r\n                [largeArcFlag, sweepFlag] = this.options.clockwise ? [1, 1] : [1, 0];\r\n            }\r\n            else {\r\n                [largeArcFlag, sweepFlag] = this.options.clockwise ? [0, 1] : [0, 0];\r\n            }\r\n            // percent may not equal the actual percent\r\n            let titlePercent = this.options.animateTitle ? percent : this.options.percent;\r\n            let titleTextPercent = titlePercent > this.options.maxPercent ?\r\n                `${this.options.maxPercent.toFixed(this.options.toFixed)}+` : titlePercent.toFixed(this.options.toFixed);\r\n            let subtitlePercent = this.options.animateSubtitle ? percent : this.options.percent;\r\n            // get title object\r\n            let title = {\r\n                x: centre.x,\r\n                y: centre.y,\r\n                textAnchor: 'middle',\r\n                color: this.options.titleColor,\r\n                fontSize: this.options.titleFontSize,\r\n                fontWeight: this.options.titleFontWeight,\r\n                texts: [],\r\n                tspans: []\r\n            };\r\n            // from v0.9.9, both title and titleFormat(...) may be an array of string.\r\n            if (this.options.titleFormat !== undefined && this.options.titleFormat.constructor.name === 'Function') {\r\n                let formatted = this.options.titleFormat(titlePercent);\r\n                if (formatted instanceof Array) {\r\n                    title.texts = [...formatted];\r\n                }\r\n                else {\r\n                    title.texts.push(formatted.toString());\r\n                }\r\n            }\r\n            else {\r\n                if (this.options.title === 'auto') {\r\n                    title.texts.push(titleTextPercent);\r\n                }\r\n                else {\r\n                    if (this.options.title instanceof Array) {\r\n                        title.texts = [...this.options.title];\r\n                    }\r\n                    else {\r\n                        title.texts.push(this.options.title.toString());\r\n                    }\r\n                }\r\n            }\r\n            // get subtitle object\r\n            let subtitle = {\r\n                x: centre.x,\r\n                y: centre.y,\r\n                textAnchor: 'middle',\r\n                color: this.options.subtitleColor,\r\n                fontSize: this.options.subtitleFontSize,\r\n                fontWeight: this.options.subtitleFontWeight,\r\n                texts: [],\r\n                tspans: []\r\n            };\r\n            // from v0.9.9, both subtitle and subtitleFormat(...) may be an array of string.\r\n            if (this.options.subtitleFormat !== undefined && this.options.subtitleFormat.constructor.name === 'Function') {\r\n                let formatted = this.options.subtitleFormat(subtitlePercent);\r\n                if (formatted instanceof Array) {\r\n                    subtitle.texts = [...formatted];\r\n                }\r\n                else {\r\n                    subtitle.texts.push(formatted.toString());\r\n                }\r\n            }\r\n            else {\r\n                if (this.options.subtitle instanceof Array) {\r\n                    subtitle.texts = [...this.options.subtitle];\r\n                }\r\n                else {\r\n                    subtitle.texts.push(this.options.subtitle.toString());\r\n                }\r\n            }\r\n            // get units object\r\n            let units = {\r\n                text: `${this.options.units}`,\r\n                fontSize: this.options.unitsFontSize,\r\n                fontWeight: this.options.unitsFontWeight,\r\n                color: this.options.unitsColor\r\n            };\r\n            // get total count of text lines to be shown\r\n            let rowCount = 0, rowNum = 1;\r\n            this.options.showTitle && (rowCount += title.texts.length);\r\n            this.options.showSubtitle && (rowCount += subtitle.texts.length);\r\n            // calc dy for each tspan for title\r\n            if (this.options.showTitle) {\r\n                for (let span of title.texts) {\r\n                    title.tspans.push({ span: span, dy: this.getRelativeY(rowNum, rowCount) });\r\n                    rowNum++;\r\n                }\r\n            }\r\n            // calc dy for each tspan for subtitle\r\n            if (this.options.showSubtitle) {\r\n                for (let span of subtitle.texts) {\r\n                    subtitle.tspans.push({ span: span, dy: this.getRelativeY(rowNum, rowCount) });\r\n                    rowNum++;\r\n                }\r\n            }\r\n            // create ID for gradient element\r\n            if (null === this._gradientUUID) {\r\n                this._gradientUUID = this.uuid();\r\n            }\r\n            // Bring it all together\r\n            this.svg = {\r\n                viewBox: `0 0 ${boxSize} ${boxSize}`,\r\n                // Set both width and height to '100%' if it's responsive\r\n                width: this.options.responsive ? '100%' : boxSize,\r\n                height: this.options.responsive ? '100%' : boxSize,\r\n                backgroundCircle: {\r\n                    cx: centre.x,\r\n                    cy: centre.y,\r\n                    r: this.options.radius + this.options.outerStrokeWidth / 2 + this.options.backgroundPadding,\r\n                    fill: this.options.backgroundColor,\r\n                    fillOpacity: this.options.backgroundOpacity,\r\n                    stroke: this.options.backgroundStroke,\r\n                    strokeWidth: this.options.backgroundStrokeWidth,\r\n                },\r\n                path: {\r\n                    // A rx ry x-axis-rotation large-arc-flag sweep-flag x y (https://developer.mozilla.org/en/docs/Web/SVG/Tutorial/Paths#Arcs)\r\n                    d: `M ${startPoint.x} ${startPoint.y}\n        A ${this.options.radius} ${this.options.radius} 0 ${largeArcFlag} ${sweepFlag} ${endPoint.x} ${endPoint.y}`,\r\n                    stroke: this.options.outerStrokeColor,\r\n                    strokeWidth: this.options.outerStrokeWidth,\r\n                    strokeLinecap: this.options.outerStrokeLinecap,\r\n                    fill: 'none'\r\n                },\r\n                circle: {\r\n                    cx: centre.x,\r\n                    cy: centre.y,\r\n                    r: this.options.radius - this.options.space - this.options.outerStrokeWidth / 2 - this.options.innerStrokeWidth / 2,\r\n                    fill: 'none',\r\n                    stroke: this.options.innerStrokeColor,\r\n                    strokeWidth: this.options.innerStrokeWidth,\r\n                },\r\n                title: title,\r\n                units: units,\r\n                subtitle: subtitle,\r\n                image: {\r\n                    x: centre.x - this.options.imageWidth / 2,\r\n                    y: centre.y - this.options.imageHeight / 2,\r\n                    src: this.options.imageSrc,\r\n                    width: this.options.imageWidth,\r\n                    height: this.options.imageHeight,\r\n                },\r\n                outerLinearGradient: {\r\n                    id: 'outer-linear-' + this._gradientUUID,\r\n                    colorStop1: this.options.outerStrokeColor,\r\n                    colorStop2: this.options.outerStrokeGradientStopColor === 'transparent' ? '#FFF' : this.options.outerStrokeGradientStopColor,\r\n                },\r\n                radialGradient: {\r\n                    id: 'radial-' + this._gradientUUID,\r\n                    colorStop1: this.options.backgroundColor,\r\n                    colorStop2: this.options.backgroundGradientStopColor === 'transparent' ? '#FFF' : this.options.backgroundGradientStopColor,\r\n                }\r\n            };\r\n        };\r\n        this.getAnimationParameters = (previousPercent, currentPercent) => {\r\n            const MIN_INTERVAL = 10;\r\n            let times, step, interval;\r\n            let fromPercent = this.options.startFromZero ? 0 : (previousPercent < 0 ? 0 : previousPercent);\r\n            let toPercent = currentPercent < 0 ? 0 : this.min(currentPercent, this.options.maxPercent);\r\n            let delta = Math.abs(Math.round(toPercent - fromPercent));\r\n            if (delta >= 100) {\r\n                // we will finish animation in 100 times\r\n                times = 100;\r\n                if (!this.options.animateTitle && !this.options.animateSubtitle) {\r\n                    step = 1;\r\n                }\r\n                else {\r\n                    // show title or subtitle animation even if the arc is full, we also need to finish it in 100 times.\r\n                    step = Math.round(delta / times);\r\n                }\r\n            }\r\n            else {\r\n                // we will finish in as many times as the number of percent.\r\n                times = delta;\r\n                step = 1;\r\n            }\r\n            // Get the interval of timer\r\n            interval = Math.round(this.options.animationDuration / times);\r\n            // Readjust all values if the interval of timer is extremely small.\r\n            if (interval < MIN_INTERVAL) {\r\n                interval = MIN_INTERVAL;\r\n                times = this.options.animationDuration / interval;\r\n                if (!this.options.animateTitle && !this.options.animateSubtitle && delta > 100) {\r\n                    step = Math.round(100 / times);\r\n                }\r\n                else {\r\n                    step = Math.round(delta / times);\r\n                }\r\n            }\r\n            // step must be greater than 0.\r\n            if (step < 1) {\r\n                step = 1;\r\n            }\r\n            return { times: times, step: step, interval: interval };\r\n        };\r\n        this.animate = (previousPercent, currentPercent) => {\r\n            if (this._timerSubscription && !this._timerSubscription.closed) {\r\n                this._timerSubscription.unsubscribe();\r\n            }\r\n            let fromPercent = this.options.startFromZero ? 0 : previousPercent;\r\n            let toPercent = currentPercent;\r\n            let { step: step, interval: interval } = this.getAnimationParameters(fromPercent, toPercent);\r\n            let count = fromPercent;\r\n            if (fromPercent < toPercent) {\r\n                this._timerSubscription = timer(0, interval).subscribe(() => {\r\n                    count += step;\r\n                    if (count <= toPercent) {\r\n                        if (!this.options.animateTitle && !this.options.animateSubtitle && count >= 100) {\r\n                            this.draw(toPercent);\r\n                            this._timerSubscription.unsubscribe();\r\n                        }\r\n                        else {\r\n                            this.draw(count);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.draw(toPercent);\r\n                        this._timerSubscription.unsubscribe();\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this._timerSubscription = timer(0, interval).subscribe(() => {\r\n                    count -= step;\r\n                    if (count >= toPercent) {\r\n                        if (!this.options.animateTitle && !this.options.animateSubtitle && toPercent >= 100) {\r\n                            this.draw(toPercent);\r\n                            this._timerSubscription.unsubscribe();\r\n                        }\r\n                        else {\r\n                            this.draw(count);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.draw(toPercent);\r\n                        this._timerSubscription.unsubscribe();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.emitClickEvent = (event) => {\r\n            if (this.options.renderOnClick) {\r\n                this.animate(0, this.options.percent);\r\n            }\r\n            this.onClick.emit(event);\r\n        };\r\n        this.applyOptions = () => {\r\n            // the options of <circle-progress> may change already\r\n            for (let name of Object.keys(this.options)) {\r\n                if (this.hasOwnProperty(name) && this[name] !== undefined) {\r\n                    this.options[name] = this[name];\r\n                }\r\n                else if (this.templateOptions && this.templateOptions[name] !== undefined) {\r\n                    this.options[name] = this.templateOptions[name];\r\n                }\r\n            }\r\n            // make sure key options valid\r\n            this.options.radius = Math.abs(+this.options.radius);\r\n            this.options.space = +this.options.space;\r\n            this.options.percent = +this.options.percent > 0 ? +this.options.percent : 0;\r\n            this.options.maxPercent = Math.abs(+this.options.maxPercent);\r\n            this.options.animationDuration = Math.abs(this.options.animationDuration);\r\n            this.options.outerStrokeWidth = Math.abs(+this.options.outerStrokeWidth);\r\n            this.options.innerStrokeWidth = Math.abs(+this.options.innerStrokeWidth);\r\n            this.options.backgroundPadding = +this.options.backgroundPadding;\r\n        };\r\n        this.getRelativeY = (rowNum, rowCount) => {\r\n            // why '-0.18em'? It's a magic number when property 'alignment-baseline' equals 'baseline'. :)\r\n            let initialOffset = -0.18, offset = 1;\r\n            return (initialOffset + offset * (rowNum - rowCount / 2)).toFixed(2) + 'em';\r\n        };\r\n        this.min = (a, b) => {\r\n            return a < b ? a : b;\r\n        };\r\n        this.max = (a, b) => {\r\n            return a > b ? a : b;\r\n        };\r\n        this.uuid = () => {\r\n            // https://www.w3resource.com/javascript-exercises/javascript-math-exercise-23.php\r\n            var dt = new Date().getTime();\r\n            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n                var r = (dt + Math.random() * 16) % 16 | 0;\r\n                dt = Math.floor(dt / 16);\r\n                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n            });\r\n            return uuid;\r\n        };\r\n        this.findSvgElement = function () {\r\n            if (this.svgElement === null) {\r\n                let tags = this.elRef.nativeElement.getElementsByTagName('svg');\r\n                if (tags.length > 0) {\r\n                    this.svgElement = tags[0];\r\n                }\r\n            }\r\n        };\r\n        this.checkViewport = () => {\r\n            this.findSvgElement();\r\n            let previousValue = this.isInViewport;\r\n            this.isInViewport = this.isElementInViewport(this.svgElement);\r\n            if (previousValue !== this.isInViewport) {\r\n                this.onViewportChanged.emit({ oldValue: previousValue, newValue: this.isInViewport });\r\n            }\r\n        };\r\n        this.onScroll = (event) => {\r\n            this.checkViewport();\r\n        };\r\n        this.loadEventsForLazyMode = () => {\r\n            if (this.options.lazy) {\r\n                this.document.addEventListener('scroll', this.onScroll, true);\r\n                this.window.addEventListener('resize', this.onScroll, true);\r\n                if (this._viewportChangedSubscriber === null) {\r\n                    this._viewportChangedSubscriber = this.onViewportChanged.subscribe(({ oldValue, newValue }) => {\r\n                        newValue ? this.render() : null;\r\n                    });\r\n                }\r\n                // svgElement must be created in DOM before being checked.\r\n                // Is there a better way to check the existence of svgElemnt?\r\n                let _timer = timer(0, 50).subscribe(() => {\r\n                    this.svgElement === null ? this.checkViewport() : _timer.unsubscribe();\r\n                });\r\n            }\r\n        };\r\n        this.unloadEventsForLazyMode = () => {\r\n            // Remove event listeners\r\n            this.document.removeEventListener('scroll', this.onScroll, true);\r\n            this.window.removeEventListener('resize', this.onScroll, true);\r\n            // Unsubscribe onViewportChanged\r\n            if (this._viewportChangedSubscriber !== null) {\r\n                this._viewportChangedSubscriber.unsubscribe();\r\n                this._viewportChangedSubscriber = null;\r\n            }\r\n        };\r\n        this.document = document;\r\n        this.window = this.document.defaultView;\r\n        Object.assign(this.options, defaultOptions);\r\n        Object.assign(this.defaultOptions, defaultOptions);\r\n    }\r\n    isDrawing() {\r\n        return (this._timerSubscription && !this._timerSubscription.closed);\r\n    }\r\n    isElementInViewport(el) {\r\n        // Return false if el has not been created in page.\r\n        if (el === null || el === undefined)\r\n            return false;\r\n        // Check if the element is out of view due to a container scrolling\r\n        let rect = el.getBoundingClientRect(), parent = el.parentNode, parentRect;\r\n        do {\r\n            parentRect = parent.getBoundingClientRect();\r\n            if (rect.top >= parentRect.bottom)\r\n                return false;\r\n            if (rect.bottom <= parentRect.top)\r\n                return false;\r\n            if (rect.left >= parentRect.right)\r\n                return false;\r\n            if (rect.right <= parentRect.left)\r\n                return false;\r\n            parent = parent.parentNode;\r\n        } while (parent != this.document.body);\r\n        // Check its within the document viewport\r\n        if (rect.top >= (this.window.innerHeight || this.document.documentElement.clientHeight))\r\n            return false;\r\n        if (rect.bottom <= 0)\r\n            return false;\r\n        if (rect.left >= (this.window.innerWidth || this.document.documentElement.clientWidth))\r\n            return false;\r\n        if (rect.right <= 0)\r\n            return false;\r\n        return true;\r\n    }\r\n    ngOnInit() {\r\n        this.loadEventsForLazyMode();\r\n    }\r\n    ngOnDestroy() {\r\n        this.unloadEventsForLazyMode();\r\n    }\r\n    ngOnChanges(changes) {\r\n        this.render();\r\n        if ('lazy' in changes) {\r\n            changes.lazy.currentValue ? this.loadEventsForLazyMode() : this.unloadEventsForLazyMode();\r\n        }\r\n    }\r\n}\r\nCircleProgressComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'circle-progress',\r\n                template: `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" *ngIf=\"svg\"\n             [attr.viewBox]=\"svg.viewBox\" preserveAspectRatio=\"xMidYMid meet\"\n             [attr.height]=\"svg.height\" [attr.width]=\"svg.width\" (click)=\"emitClickEvent($event)\" [attr.class]=\"options.class\">\n            <defs>\n                <linearGradient *ngIf=\"options.outerStrokeGradient\" [attr.id]=\"svg.outerLinearGradient.id\">\n                    <stop offset=\"5%\" [attr.stop-color]=\"svg.outerLinearGradient.colorStop1\"  [attr.stop-opacity]=\"1\"/>\n                    <stop offset=\"95%\" [attr.stop-color]=\"svg.outerLinearGradient.colorStop2\" [attr.stop-opacity]=\"1\"/>\n                </linearGradient>\n                <radialGradient *ngIf=\"options.backgroundGradient\" [attr.id]=\"svg.radialGradient.id\">\n                    <stop offset=\"5%\" [attr.stop-color]=\"svg.radialGradient.colorStop1\" [attr.stop-opacity]=\"1\"/>\n                    <stop offset=\"95%\" [attr.stop-color]=\"svg.radialGradient.colorStop2\" [attr.stop-opacity]=\"1\"/>\n                </radialGradient>\n            </defs>\n            <ng-container *ngIf=\"options.showBackground\">\n                <circle *ngIf=\"!options.backgroundGradient\"\n                        [attr.cx]=\"svg.backgroundCircle.cx\"\n                        [attr.cy]=\"svg.backgroundCircle.cy\"\n                        [attr.r]=\"svg.backgroundCircle.r\"\n                        [attr.fill]=\"svg.backgroundCircle.fill\"\n                        [attr.fill-opacity]=\"svg.backgroundCircle.fillOpacity\"\n                        [attr.stroke]=\"svg.backgroundCircle.stroke\"\n                        [attr.stroke-width]=\"svg.backgroundCircle.strokeWidth\"/>\n                <circle *ngIf=\"options.backgroundGradient\"\n                        [attr.cx]=\"svg.backgroundCircle.cx\"\n                        [attr.cy]=\"svg.backgroundCircle.cy\"\n                        [attr.r]=\"svg.backgroundCircle.r\"\n                        attr.fill=\"url(#{{svg.radialGradient.id}})\"\n                        [attr.fill-opacity]=\"svg.backgroundCircle.fillOpacity\"\n                        [attr.stroke]=\"svg.backgroundCircle.stroke\"\n                        [attr.stroke-width]=\"svg.backgroundCircle.strokeWidth\"/>\n            </ng-container>            \n            <circle *ngIf=\"options.showInnerStroke\"\n                    [attr.cx]=\"svg.circle.cx\"\n                    [attr.cy]=\"svg.circle.cy\"\n                    [attr.r]=\"svg.circle.r\"\n                    [attr.fill]=\"svg.circle.fill\"\n                    [attr.stroke]=\"svg.circle.stroke\"\n                    [attr.stroke-width]=\"svg.circle.strokeWidth\"/>\n            <ng-container *ngIf=\"+options.percent!==0 || options.showZeroOuterStroke\">\n                <path *ngIf=\"!options.outerStrokeGradient\"\n                        [attr.d]=\"svg.path.d\"\n                        [attr.stroke]=\"svg.path.stroke\"\n                        [attr.stroke-width]=\"svg.path.strokeWidth\"\n                        [attr.stroke-linecap]=\"svg.path.strokeLinecap\"\n                        [attr.fill]=\"svg.path.fill\"/>\n                <path *ngIf=\"options.outerStrokeGradient\"\n                        [attr.d]=\"svg.path.d\"\n                        attr.stroke=\"url(#{{svg.outerLinearGradient.id}})\"\n                        [attr.stroke-width]=\"svg.path.strokeWidth\"\n                        [attr.stroke-linecap]=\"svg.path.strokeLinecap\"\n                        [attr.fill]=\"svg.path.fill\"/>\n            </ng-container>\n            <text *ngIf=\"!options.showImage && (options.showTitle || options.showUnits || options.showSubtitle)\"\n                  alignment-baseline=\"baseline\"\n                  [attr.x]=\"svg.circle.cx\"\n                  [attr.y]=\"svg.circle.cy\"\n                  [attr.text-anchor]=\"svg.title.textAnchor\">\n                <ng-container *ngIf=\"options.showTitle\">\n                    <tspan *ngFor=\"let tspan of svg.title.tspans\"\n                           [attr.x]=\"svg.title.x\"\n                           [attr.y]=\"svg.title.y\"\n                           [attr.dy]=\"tspan.dy\"\n                           [attr.font-size]=\"svg.title.fontSize\"\n                           [attr.font-weight]=\"svg.title.fontWeight\"\n                           [attr.fill]=\"svg.title.color\">{{tspan.span}}</tspan>\n                </ng-container>\n                <tspan *ngIf=\"options.showUnits\"\n                       [attr.font-size]=\"svg.units.fontSize\"\n                       [attr.font-weight]=\"svg.units.fontWeight\"\n                       [attr.fill]=\"svg.units.color\">{{svg.units.text}}</tspan>\n                <ng-container *ngIf=\"options.showSubtitle\">\n                    <tspan *ngFor=\"let tspan of svg.subtitle.tspans\"\n                           [attr.x]=\"svg.subtitle.x\"\n                           [attr.y]=\"svg.subtitle.y\"\n                           [attr.dy]=\"tspan.dy\"\n                           [attr.font-size]=\"svg.subtitle.fontSize\"\n                           [attr.font-weight]=\"svg.subtitle.fontWeight\"\n                           [attr.fill]=\"svg.subtitle.color\">{{tspan.span}}</tspan>\n                </ng-container>\n            </text>\n            <image *ngIf=\"options.showImage\" preserveAspectRatio=\"none\" \n                [attr.height]=\"svg.image.height\"\n                [attr.width]=\"svg.image.width\"\n                [attr.xlink:href]=\"svg.image.src\"\n                [attr.x]=\"svg.image.x\"\n                [attr.y]=\"svg.image.y\"\n            />\n        </svg>\n    `\r\n            },] }\r\n];\r\nCircleProgressComponent.ctorParameters = () => [\r\n    { type: CircleProgressOptions },\r\n    { type: ElementRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\nCircleProgressComponent.propDecorators = {\r\n    onClick: [{ type: Output }],\r\n    name: [{ type: Input }],\r\n    class: [{ type: Input }],\r\n    backgroundGradient: [{ type: Input }],\r\n    backgroundColor: [{ type: Input }],\r\n    backgroundGradientStopColor: [{ type: Input }],\r\n    backgroundOpacity: [{ type: Input }],\r\n    backgroundStroke: [{ type: Input }],\r\n    backgroundStrokeWidth: [{ type: Input }],\r\n    backgroundPadding: [{ type: Input }],\r\n    radius: [{ type: Input }],\r\n    space: [{ type: Input }],\r\n    percent: [{ type: Input }],\r\n    toFixed: [{ type: Input }],\r\n    maxPercent: [{ type: Input }],\r\n    renderOnClick: [{ type: Input }],\r\n    units: [{ type: Input }],\r\n    unitsFontSize: [{ type: Input }],\r\n    unitsFontWeight: [{ type: Input }],\r\n    unitsColor: [{ type: Input }],\r\n    outerStrokeGradient: [{ type: Input }],\r\n    outerStrokeWidth: [{ type: Input }],\r\n    outerStrokeColor: [{ type: Input }],\r\n    outerStrokeGradientStopColor: [{ type: Input }],\r\n    outerStrokeLinecap: [{ type: Input }],\r\n    innerStrokeColor: [{ type: Input }],\r\n    innerStrokeWidth: [{ type: Input }],\r\n    titleFormat: [{ type: Input }],\r\n    title: [{ type: Input }],\r\n    titleColor: [{ type: Input }],\r\n    titleFontSize: [{ type: Input }],\r\n    titleFontWeight: [{ type: Input }],\r\n    subtitleFormat: [{ type: Input }],\r\n    subtitle: [{ type: Input }],\r\n    subtitleColor: [{ type: Input }],\r\n    subtitleFontSize: [{ type: Input }],\r\n    subtitleFontWeight: [{ type: Input }],\r\n    imageSrc: [{ type: Input }],\r\n    imageHeight: [{ type: Input }],\r\n    imageWidth: [{ type: Input }],\r\n    animation: [{ type: Input }],\r\n    animateTitle: [{ type: Input }],\r\n    animateSubtitle: [{ type: Input }],\r\n    animationDuration: [{ type: Input }],\r\n    showTitle: [{ type: Input }],\r\n    showSubtitle: [{ type: Input }],\r\n    showUnits: [{ type: Input }],\r\n    showImage: [{ type: Input }],\r\n    showBackground: [{ type: Input }],\r\n    showInnerStroke: [{ type: Input }],\r\n    clockwise: [{ type: Input }],\r\n    responsive: [{ type: Input }],\r\n    startFromZero: [{ type: Input }],\r\n    showZeroOuterStroke: [{ type: Input }],\r\n    lazy: [{ type: Input }],\r\n    templateOptions: [{ type: Input, args: ['options',] }]\r\n};\n\nclass NgCircleProgressModule {\r\n    static forRoot(options = {}) {\r\n        return {\r\n            ngModule: NgCircleProgressModule,\r\n            providers: [\r\n                { provide: CircleProgressOptions, useValue: options }\r\n            ]\r\n        };\r\n    }\r\n}\r\nNgCircleProgressModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [CircleProgressComponent],\r\n                imports: [\r\n                    CommonModule\r\n                ],\r\n                exports: [CircleProgressComponent]\r\n            },] }\r\n];\n\n/*\r\n * Public API Surface of ng-circle-progress\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CircleProgressComponent, CircleProgressOptions, NgCircleProgressModule };\n//# sourceMappingURL=ng-circle-progress.js.map\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<section class=\"about-section about-illustration-img section-gap\">\n    <div class=\"container\">\n        <div class=\"illustration-img\">\n            <img src=\"assets/img/illustration/01.png\" alt=\"img\">\n        </div>\n        <div class=\"row no-gutters justify-content-lg-end justify-content-center\">\n            <div class=\"col-lg-6 col-md-10\">\n                <div class=\"about-text\">\n                    <div class=\"section-title left-border mb-40\">\n                        <span class=\"title-tag\">About Us</span>\n                        <h2 class=\"title\">Professional Business <br> Guidance Agency </h2>\n                    </div>\n                    <p class=\"mb-25\">\n                        Sedut perspiciatis unde omnis iste natus error sit voluptat em accusantium doloremq\n                        laudantium, totam raperiaeaque ipsa quae ab illo inventore veritatis et quasi\n                    </p>\n                    <p>\n                        Doloremque laudantium, totam raperiaeaque ipsa quae ab illo inventore veritatis et quasi\n                    </p>\n                    <ul class=\"about-list\">\n                        <li> <i class=\"far fa-check\"></i> Business & Consulting Agency</li>\n                        <li> <i class=\"far fa-check\"></i> Awards Winning Business Comapny</li>\n                    </ul>\n                    <a routerLink=\"/about\" class=\"main-btn\">Learn More</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","<section class=\"service-section shape-style-one section-gap grey-bg\">\n    <div class=\"container\">\n        <!-- Section Title -->\n        <div class=\"section-title text-center both-border mb-30\">\n            <span class=\"title-tag\">Comany Services</span>\n            <h2 class=\"title\">We Provide Most Exclusive <br> Service For Business</h2>\n        </div>\n        <!-- Services Boxes -->\n        <div class=\"row service-boxes justify-content-center\">\n            <div class=\"col-lg-4 col-md-6 col-sm-8 col-10 col-tiny-12\" *ngFor=\"let item of service | slice:0:3\">\n                <div class=\"service-box text-center\">\n                    <div class=\"icon\">\n                        <img [src]=\"item.shadowicon\" [alt]=\"item.title\">\n                    </div>\n                    <h3><a routerLink=\"/service-details/{{item.id}}\">{{item.title}}</a></h3>\n                    <p>{{item.shortdesc}}</p>\n                    <a routerLink=\"/service-details/{{item.id}}\" class=\"service-link\">\n                        <i class=\"fal fa-long-arrow-right\"></i>\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { SlickCarouselModule } from 'ngx-slick-carousel';\nimport { NgCircleProgressModule } from 'ng-circle-progress';\n\nimport { HomeRoutingModule } from './home-routing.module';\nimport { HomeComponent } from './home.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { BlogpostComponent } from './blogpost/blogpost.component';\nimport { TestimonialsComponent } from './testimonials/testimonials.component';\nimport { SkillsComponent } from './skills/skills.component';\nimport { BannerComponent } from './banner/banner.component';\nimport { AboutComponent } from './about/about.component';\nimport { ServiceComponent } from './service/service.component';\nimport { VideoComponent } from './video/video.component';\nimport { FeaturesComponent } from './features/features.component';\nimport { WhyusComponent } from './whyus/whyus.component';\nimport { FactsComponent } from './facts/facts.component';\nimport { TeamComponent } from './team/team.component'\n\n\n@NgModule({\n  declarations: [HomeComponent, BlogpostComponent, TestimonialsComponent, SkillsComponent, BannerComponent, AboutComponent, ServiceComponent, VideoComponent, FeaturesComponent, WhyusComponent, FactsComponent, TeamComponent],\n  imports: [\n    CommonModule,\n    HomeRoutingModule,\n    SharedModule,\n    NgbModule,\n    SlickCarouselModule,\n    NgCircleProgressModule.forRoot()\n  ]\n})\nexport class HomeModule { }\n","import { Component, OnInit } from '@angular/core';\nimport counter from '../../../../data/counter.json';\n\n@Component({\n  selector: 'app-facts',\n  templateUrl: './facts.component.html',\n  styleUrls: ['./facts.component.css']\n})\nexport class FactsComponent implements OnInit {\n\n  constructor() { }\n  public counter = counter;\n\n  ngOnInit(): void {\n  }\n\n}\n","<section class=\"banner-section\">\n    <ngx-slick-carousel #slickModal=\"slick-carousel\" [config]=\"settings\" class=\"banner-slider\" id=\"bannerSlider\">\n        <div ngxSlickItem class=\"single-banner\" [style.background-image]=\"'url('+item.img+')'\"\n            *ngFor=\"let item of banner\">\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"col-lg-10\">\n                        <div class=\"banner-content\">\n                            <span class=\"promo-text\" data-animation=\"fadeInDown\" data-delay=\"0.8s\">\n                                {{item.subtitle}}\n                            </span>\n                            <h1 data-animation=\"fadeInUp\" data-delay=\"1s\" [innerHtml]=\"item.title\"></h1>\n                            <ul class=\"btn-wrap\">\n                                <li data-animation=\"fadeInLeft\" data-delay=\"1.2s\">\n                                    <a routerLink=\"/contact\" class=\"main-btn main-btn-4\">Get Started Now</a>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"banner-shapes\">\n                <div class=\"one\"></div>\n                <div class=\"two\"></div>\n                <div class=\"three\"></div>\n                <div class=\"four\"></div>\n            </div>\n        </div>\n    </ngx-slick-carousel>\n    <!-- <div class=\"search-wrap\">\n        <a href=\"#\" class=\"search-icon\"><i class=\"far fa-search\"></i></a>\n    </div> -->\n</section>","<app-header-one></app-header-one>\n<app-banner></app-banner>\n<app-about></app-about>\n<app-service></app-service>\n<!-- <app-video></app-video> -->\n<!-- <app-features></app-features> -->\n<app-whyus></app-whyus>\n<app-facts></app-facts>\n<!-- <app-team></app-team> -->\n<!-- <app-skills></app-skills> -->\n<!-- <app-testimonials></app-testimonials> -->\n<section class=\"client-section\">\n    <div class=\"container\">\n        <div class=\"client-slider section-gap line-bottom\">\n            <app-brands></app-brands>\n        </div>\n    </div>\n</section>\n<!-- <app-blogpost></app-blogpost> -->\n<app-footer #footerComponent [layout]=\"classname\" [logo]=\"ftlogo\" [shape]=\"ftshape\" [shape2]=\"ftshape2\" [shapeclass]=\"ftshapeclass\"\n    [shape2class]=\"ftshape2class\"></app-footer>","<section class=\"wcu-section box-style\">\n    <div class=\"container\">\n        <div class=\"wcu-inner\">\n            <div class=\"row align-items-center justify-content-center\">\n                <div class=\"col-lg-6\">\n                    <div class=\"wcu-image text-center text-lg-left\">\n                        <img src=\"assets/img/illustration/02.png\" alt=\"img\">\n                    </div>\n                </div>\n                <div class=\"col-lg-6 col-md-10\">\n                    <div class=\"wcu-text\">\n                        <div class=\"section-title left-border mb-40\">\n                            <span class=\"title-tag\">What We Do</span>\n                            <h2 class=\"title\">Why Choose Finsa <br> Business Agency</h2>\n                        </div>\n                        <p>\n                            Sedut perspiciatis unde omnis iste natus evoluptat em accusantium doloremque laudantium\n                        </p>\n                        <ul class=\"wcu-list\">\n                            <li *ngFor=\"let item of list\">\n                                <i class=\"far fa-check-circle\"></i> {{item.title}}\n                            </li>\n                        </ul>\n\n                        <a routerLink=\"/contact\" class=\"main-btn main-btn-4\">Join With Us</a>\n                    </div>\n                </div>\n            </div>\n            <!-- <img src=\"assets/img/lines/03.png\" alt=\"shape\" class=\"line-shape-one\">\n            <img src=\"assets/img/lines/04.png\" alt=\"shape\" class=\"line-shape-two\"> -->\n        </div>\n    </div>\n</section>","import { Component, OnInit } from '@angular/core';\nimport service from '../../../../data/service.json';\n\n@Component({\n  selector: 'app-service',\n  templateUrl: './service.component.html',\n  styleUrls: ['./service.component.css']\n})\nexport class ServiceComponent implements OnInit {\n\n  constructor() { }\n  public service = service;\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-banner',\n  templateUrl: './banner.component.html',\n  styleUrls: ['./banner.component.css']\n})\nexport class BannerComponent implements OnInit {\n\n  constructor() { }\n  banner = [\n    {\n      img: \"assets/img/banner/01.jpg\",\n      subtitle: \"business & consulting\",\n      title: \"Making Difference <br> Growth Your Business <br> With Modern Ideas\"\n    },\n    {\n      img: \"assets/img/banner/02.jpg\",\n      subtitle: \"business & consulting\",\n      title: \"Making Difference <br> Growth Your Business <br> With Modern Ideas\"\n    },\n    {\n      img: \"assets/img/banner/03.jpg\",\n      subtitle: \"business & consulting\",\n      title: \"Making Difference <br> Growth Your Business <br> With Modern Ideas\"\n    }\n  ];\n  settings = {\n    infinite: true,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    autoplay: true,\n    autoplaySpeed: 5000,\n    speed: 500,\n    arrows: true,\n    fade: false,\n    dots: false,\n    swipe: true,\n    adaptiveHeight: true,\n    nextArrow: '<button class=\"slick-arrow next-arrow\"><i class=\"fal fa-long-arrow-right\"></i></button>',\n    prevArrow: '<button class=\"slick-arrow prev-arrow\"><i class=\"fal fa-long-arrow-left\"></i></button>',\n    responsive: [{\n      breakpoint: 768,\n      settings: {\n        arrows: false\n      }\n    }]\n  };\n\n  ngOnInit(): void {\n  }\n\n}\n","<section class=\"fact-section grey-bg\">\n    <div class=\"container\">\n        <div class=\"fact-boxes row justify-content-between align-items-center\">\n            <div class=\"col-lg-3 col-6\" *ngFor=\"let item of counter\">\n                <div class=\"fact-box text-center mb-40\">\n                    <div class=\"icon\">\n                        <i [class]=\"item.icon\"></i>\n                    </div>\n                    <h2 class=\"counter\">{{item.value | number:'1.0-0'}}</h2>\n                    <p class=\"title\">{{item.title}}</p>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n  // Footer style\n  classname = \"\";\n  ftlogo = \"assets/img/logo-2.png\";\n  ftshape = \"assets/img/lines/01.png\";\n  ftshape2 = \"assets/img/lines/02.png\";\n  ftshapeclass = \"line-one\";\n  ftshape2class = \"line-two\";\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-whyus',\n  templateUrl: './whyus.component.html',\n  styleUrls: ['./whyus.component.css']\n})\nexport class WhyusComponent implements OnInit {\n\n  constructor() { }\n  list = [\n    {title:\"Specialist Company Advisor Team\"},\n    {title:\"Understanding Machines Open Standard\"},\n    {title:\"Can Data Visualization Improve Mobile\"},\n  ];\n\n  ngOnInit(): void {\n  }\n\n}\n"],"sourceRoot":"webpack:///"}